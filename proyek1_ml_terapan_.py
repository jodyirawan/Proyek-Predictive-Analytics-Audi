# -*- coding: utf-8 -*-
"""Proyek1_ML_Terapan_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zIXr_e0SjxAL4IkZhpSRvrJHUB8snBk7

#1. Mengimpor pustaka/modul
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""#2. Mempersiapkan Dataset

##2.1. Memuat Data pada sebuah Dataframe menggunakan pandas
"""

# load the dataset
url = 'https://raw.githubusercontent.com/jodyirawan/datasetclasification/main/audi.csv'
audi = pd.read_csv(url)
audi

"""##2.2. Keterangan kolom pada dataset"""

audi.info()

audi.describe()

"""#3. Menangani Missing Value

##3.1. Mengecek Missing Value
"""

tax = (audi.tax == 0).sum()
engineSize = (audi.engineSize == 0).sum()

print("Nilai 0 di kolom tax ada: ", tax) 
print("Nilai 0 di kolom engineSize ada: ", engineSize)

"""##3.2. Menghapus missing value."""

# Drop baris dengan nilai 'tax', 'engineSize' = 0
audi = audi.loc[(audi[['tax', 'engineSize']]!=0).all(axis=1)]
 
# Cek ukuran data untuk memastikan baris sudah di-drop
audi.shape

audi.describe()

"""#4. Visualisasi Data dan Analisis Data"""

sns.boxplot(x=audi['mpg'])

sns.boxplot(x=audi['engineSize'])

"""##4.1. Mengatasi outliers dengan metode IQR"""

Q1 = audi.quantile(0.25)
Q3 = audi.quantile(0.75)
IQR=Q3-Q1
audi=audi[~((audi<(Q1-1.5*IQR))|(audi>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita drop outliers
audi.shape

"""##4.2. Membagi fitur pada dataset menjadi dua bagian"""

numerical_features = ['price', 'year',	'mileage',	'tax',	'mpg',	'engineSize']
categorical_features = ['model', 'transmission', 'fuelType']

"""##4.3. Categorical Features dengan Fitur Cut"""

feature = categorical_features[0]
count = audi[feature].value_counts()
percent = 100*audi[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

feature = categorical_features[1]
count = audi[feature].value_counts()
percent = 100*audi[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

feature = categorical_features[2]
count = audi[feature].value_counts()
percent = 100*audi[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""##4.4. Fitur numerik, Histogram"""

audi.hist(bins=50, figsize=(20,15))
plt.show()

"""##4.5. Multivariate EDA, melihat hubungan antara dua atau lebih variabel pada data."""

cat_features = audi.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x=col, y="price", kind="bar", dodge=False, height = 4, aspect = 3,  data=audi, palette="Set3")
  plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

"""##4.6 Numerical Features, mengamati hubungan antara fitur numerik"""

# mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(audi, diag_kind = 'kde')

# mengamati hubungan antar fitur numerik dengan fungsi corr()
plt.figure(figsize=(10, 8))
correlation_matrix = audi.corr().round(2)
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""##4.7. Drop fitur tax"""

audi.drop(['tax'], inplace=True, axis=1)
audi.head()

"""#5. Data Preparation

##5.1. Encoding Fitur Kategori dengan one-hot-encoding
"""

from sklearn.preprocessing import  OneHotEncoder
audi = pd.concat([audi, pd.get_dummies(audi['model'], prefix='model', drop_first=True)],axis=1)
audi = pd.concat([audi, pd.get_dummies(audi['transmission'], prefix='transmission', drop_first=True)],axis=1)
audi = pd.concat([audi, pd.get_dummies(audi['fuelType'], prefix='fuelType', drop_first=True)],axis=1)
audi.drop(['model','transmission','fuelType'], axis=1, inplace=True)
audi.head()

"""##5.2. Membagi dataset menjadi data latih (train) dan data uji (test)"""

from sklearn.model_selection import train_test_split
 
X = audi.drop(["price"],axis =1)
y = audi["price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""##5.3. Standarisasi"""

from sklearn.preprocessing import StandardScaler
 
numerical_features = ['mpg', 'engineSize']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""#6. Pembuatan Model"""

# Siapkan daraframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""##6.1. Model K-Nearest Neighbor"""

from sklearn.neighbors import KNeighborsRegressor
 
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_train)

"""##6.2. Model Random Forest"""

# Impor library yang dibutuhkan
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
 
# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""##6.3. Model Boosting Algorithm"""

from sklearn.ensemble import AdaBoostRegressor
 
boosting = AdaBoostRegressor(n_estimators=50, learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""#7. Evaluasi Model

##7.1. Scaling fitur numerik
"""

## Scale our numerical features so they have zero mean and a variance of one
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""##7.2. Evaluasi ketiga model kita dengan metrik MSE"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)